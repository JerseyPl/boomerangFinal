const readlineSync = require("readline-sync");
const Hero = require("./game-models/Hero");
const Enemy = require("./game-models/Enemy");
const View = require("./View");
const Boomerang = require("./game-models/Boomerang");
const sound = require("play-sound")((opts = {}));
// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.

class Game {
  constructor({ trackLength }) {
    this.trackLength = trackLength;
    this.boomerang = new Boomerang(trackLength);
    this.hero = new Hero({
      position: 0,
      position2: undefined,
      boomerang: this.boomerang,
    });
    this.enemy = new Enemy(trackLength);
    this.secEnemy = new Enemy(trackLength);
    this.view = new View(this);
    this.track = [];
    this.track2 = [];
    this.regenerateTrack();
  }

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    this.track = new Array(this.trackLength).fill(" ");
    this.track[0] = "‚õΩ";
    this.track[this.enemy.position] = this.enemy.skin;
    if (this.hero.position >= 0) {
      this.track[this.hero.position] = this.hero.skin;
    }
    if (
      this.hero.boomerang.position >= 0 &&
      this.hero.boomerang.position < this.trackLength
    ) {
      this.track[this.hero.boomerang.position] = this.hero.boomerang.skin;
    }

    this.track2 = new Array(this.trackLength).fill(" ");
    this.track2[0] = "‚õΩ";
    this.track2[this.secEnemy.position] = this.secEnemy.skin;

    if (this.hero.position2 >= 0) {
      this.track2[this.hero.position2] = this.hero.skin;
    }

    if (
      this.hero.boomerang.position2 >= 0 &&
      this.hero.boomerang.position2 < this.trackLength
    ) {
      this.track2[this.hero.boomerang.position2] = this.hero.boomerang.skin;
    }
  }

  check() {
    if (this.hero.position === this.enemy.position) {
      this.hero.die();
    }
    if (this.hero.position2 === this.secEnemy.position2) {
      this.hero.die();
    }
  }

  play() {
    this.hero.name = readlineSync.question("\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ");
    process.stdin.resume();
    if (!this.hero.name) {
      this.hero.name = "–í–æ–¥–∏–ª–∞";
    }
    setInterval(() => {
      // Let's play!
      this.handleCollisions();
      this.regenerateTrack();

      // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ
      this.enemy.moveLeft();
      this.secEnemy.moveLeft();

      // –ï—Å–ª–∏ –≤—Ä–∞–≥ –¥–æ—Å—Ç–∏–≥ –∫—Ä–∞—è —Ç—Ä–µ–∫–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
      if (this.enemy.position < 0) {
        this.enemy = new Enemy(this.trackLength);
      }
      if (this.secEnemy.position2 < 0) {
        this.secEnemy = new Enemy(this.trackLength);
      }

      this.view.render(this.track);
    }, 120); // –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  }

  handleCollisions() {
    if (
      (this.hero.position >= this.enemy.position &&
        this.hero.position - this.enemy.position < 1) ||
      (this.hero.position2 >= this.secEnemy.position2 &&
        this.hero.position2 - this.secEnemy.position2 < 1)
    ) {
      this.hero.liveCount -= 1;
      if (this.hero.liveCount === 2) {
        this.hero.live = "–¢–≤–æ–∏ –Ω–∏–∫—á–µ–º–Ω—ã–µ –∂–∏–∑–Ω–∏: ü§°ü§°üíÄ";
        sound.play("./src/sounds/avaria.wav");
      }
      if (this.hero.liveCount === 1) {
        this.hero.live = "–¢–≤–æ–∏ –Ω–∏–∫—á–µ–º–Ω—ã–µ –∂–∏–∑–Ω–∏: ü§°üíÄüíÄ";
        sound.play("./src/sounds/avaria.wav");
      }
      if (this.hero.liveCount === 0) {
        this.hero.live = "–¢–≤–æ–∏ –Ω–∏–∫—á–µ–º–Ω—ã–µ –∂–∏–∑–Ω–∏: üíÄüíÄüíÄ";
        this.hero.die();
        sound.play("./src/sounds/gameover.wav");
      }
    }

    if (this.boomerang.position >= this.enemy.position) {
      // sound.play("./src/sounds/enemyDie.wav");
      this.enemy.die();
      this.hero.scores += 1;
      // –û–±–Ω—É–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±—É–º–µ—Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–æ–º
      this.boomerang.position = undefined;
      this.enemy = new Enemy(this.trackLength);
    } // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
    if (this.boomerang.position2 === this.secEnemy.position2) {
      sound.play("./src/sounds/enemyDie.wav");
      this.secEnemy.die();
      this.hero.scores += 1;
      // –û–±–Ω—É–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±—É–º–µ—Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–æ–º
      this.boomerang.position2 = undefined;
      this.secEnemy = new Enemy(this.trackLength); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
    }
  }
}
module.exports = Game;
